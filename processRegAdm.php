<?php
include 'dbConnection.php';

header('Content-Type: application/json');

// Get and decode the JSON data
//Read data from HTTP server
$jsonData = file_get_contents('php://input');
//Convert JSON data into PHP variable; true: associative array
$data = json_decode($jsonData, true);

// Function to get UserID based on email
function getUserIDByEmail($conn, $email) {
    //desc limit 1: get the latest UserID with one userID
    $stmt = $conn->prepare("SELECT UserID FROM USER WHERE UPPER(EmailAddress) = UPPER(?) ORDER BY UserID DESC LIMIT 1");
    $stmt->bind_param("s", $email);
    
    if (!$stmt->execute()) {
        throw new Exception("Error fetching UserID: " . $stmt->error);
    }
    
    $result = $stmt->get_result();
    if ($result->num_rows === 0) {
        throw new Exception("No user found with email: " . $email);
    }
    
    $row = $result->fetch_assoc();
    $stmt->close();
    return $row['UserID'];
}

// Function to get AdmID based on UserID
function getAdmIDByUserID($conn, $userID) {
    $stmt = $conn->prepare("SELECT AdminID FROM ADMIN WHERE UserID = ? ORDER BY AdminID DESC LIMIT 1");
    $stmt->bind_param("s", $userID);
    
    if (!$stmt->execute()) {
        throw new Exception("Error fetching AdminID: " . $stmt->error);
    }
    
    $result = $stmt->get_result();
    if ($result->num_rows === 0) {
        throw new Exception("No admin found with UserID: " . $userID);
    }
    
    $row = $result->fetch_assoc();
    $stmt->close();
    return $row['AdminID'];
}

// Start transaction
//database changes (e.g., INSERT, UPDATE, or DELETE queries) will not be committed to the database immediately
$connMe->begin_transaction();

try {
    $formData = $data['formData'];
    $isExistingUser = $data['isExistingUser'];
    
    //if the user is not existing (new user) condition
    if (!$isExistingUser) {
        // Check if gender exists and convert to single character (M/F)
        if (isset($formData['gender'])) {
            $gender = strtoupper($formData['gender']) === 'MALE' ? 'M' : 'F';
        } else {
            throw new Exception("Gender is required");
        }
        
        // Insert into USER table first
        $userStmt = $connMe->prepare("INSERT INTO USER (FullName, EmailAddress, EmailSecCode, PhoneNo, UserType, BirthDate, Gender, SecQues1, SecQues2) VALUES (?, UPPER(?), ?, ?, UPPER(?), ?, ?, ?, ?)");
        
        //Create variable first
        $fullName = strtoupper($formData['fullName']);
        $emailChecked = $formData['emailChecked'];
        $emailSecCode = $formData['emailSecCode'];
        $phoneChecked = $formData['phoneChecked'];
        $userType = $formData['userType'];
        $birthDate = $formData['birthDate'];
        $secQues1 = $formData['secQues1'];
        $secQues2 = $formData['secQues2'];

        $userStmt->bind_param("sssssssss", 
            $fullName,
            $emailChecked,
            $emailSecCode,
            $phoneChecked,
            $userType,
            $birthDate,
            $gender,
            $secQues1,
            $secQues2
        );
        
        if (!$userStmt->execute()) {
            throw new Exception("Error inserting into USER table: " . $userStmt->error);
        }
        
        $userStmt->close();
        
        // Get the UserID that was generated by the trigger
        $userID = getUserIDByEmail($connMe, $formData['emailChecked']);
        
    } else {
        // Get existing USER ID
        $userID = getUserIDByEmail($connMe, $formData['emailChecked']);

        // Update UserType to include Admin role
        $updateTypeStmt = $connMe->prepare("UPDATE USER SET UserType = CONCAT(UserType, ' ADMIN') 
                                          WHERE UserID = ? AND UserType NOT LIKE '%ADMIN%'");
        
        if (!$updateTypeStmt) {
            throw new Exception("Error preparing update statement: " . $connMe->error);
        }
        
        $updateTypeStmt->bind_param("s", $userID);
        
        if (!$updateTypeStmt->execute()) {
            throw new Exception("Error updating UserType: " . $updateTypeStmt->error);
        }
        
        $updateTypeStmt->close();
    }

    // Verify that we have a valid UserID before proceeding
    if (!$userID) {
        throw new Exception("Invalid UserID");
    }

    // Insert into ADMIN table
    $admStmt = $connMe->prepare("INSERT INTO ADMIN (UserID, Username, Password, Department, Position) VALUES (?, ?, ?, UPPER(?), UPPER(?))");
    
    if (!$admStmt) {
        throw new Exception("Error preparing ADMIN statement: " . $connMe->error);
    }
    
    $admStmt->bind_param("sssss",
        $userID,
        $formData['username'],
        $formData['password'],
        $formData['department'],
        $formData['position']
    );
    
    if (!$admStmt->execute()) {
        throw new Exception("Error inserting into ADMIN table: " . $admStmt->error);
    }
    
    $admStmt->close();

    // Get the AdminID after successful insertion
    $adminID = getAdmIDByUserID($connMe, $userID);

    // If we got here, everything worked, so commit the transaction
    $connMe->commit();
    
    // Return the UserID and AdminID to the client
    echo json_encode([
        'status' => 'success',
        'userID' => $userID,
        'adminID' => $adminID
    ]);

} catch (Exception $e) {
    // Something went wrong, rollback the transaction
    $connMe->rollback();
    echo json_encode([
        'status' => 'error',
        'message' => $e->getMessage()
    ]);
}

$connMe->close();
?>